openapi: 3.0.0
info:
  description: >-
    API pre riešenie zberu a prístupu k údajom v meracom systéme nSoric. 
    Riešenie má 2 základné časti: AUTH API a DATA API. AUTH API poskytuje funkciu overenia
    používateľa a sprístupnenie dostupných meracích aplikácií. Meracia aplikácia je definovaná
    ako riešenie, ktoré sa skladá s hardvérovej časti (zber údajov), služby ukladania dát a služby prístupu
    k dátam (DATA API).
  version: "2.0"
  title: Measurement system API
  contact:
    email: api@nsoric.com
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
  - name: Auth
    description: Authorization and related methods

paths:
  "/auth/login/":
    post:
      tags:
        - Auth
      summary: Login to system
      description: First action have to be authorized to access to other parts of System. Response contains of JWT toket, that have to be usen in header o each of next messages. This is first step in login process. This step can not be skipped.
      parameters:
        - in: header
          name: login
          required: true
          description: login to system
          style: simple
          example: juraj
          schema:
            type: string
            maxLength: 64
        - in: header
          name: password
          required: true
          description: user's password
          style: simple
          example: myV3ry5tr0ngPa5sw0rd
          schema:
            maxLength: 128
            type: string
            format: password
      security: []
      responses:
        "200":
          description: User was successfully logged
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginUserObject"
        "400":
          description: Bad request, invalid request message parameters or deceptive request routing
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse" 
        "404":
          description: API can’t map the client’s URI to a resource but may be available in the future
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse" 
        "501":
          description: Database corupted, or down
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse" 

  "/auth/user/":
    get:
      tags:
        - Auth
      summary: Get list of all users
      description: "Return list of all users as objects. Action is allowed for SystemAdmin only."
      responses:
        "200":
          description: User was successfully logged
          content:
            application/json:
              schema:
                type: array
                maxItems: 100
                items:
                  $ref: "#/components/schemas/LoginUser"
        "400":
          description: Invalid request message parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse"             
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/PrivilegiesError"

    post:
      tags:
        - Auth
      summary: Add new user
      description: Adding new user to database 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUser"
      responses:
        '201':
          description: New user was successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppUser"
        "400":
          description: Invalid request parameter
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse"         
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/PrivilegiesError"

  "/auth/user/{login}":
    get:
      tags:
        - Auth
      summary: Get user detail
      description: "Return users related objects: allowed applications, user details. User have to be authentificated by /auth/login/ first."
      parameters:
        - in: path
          name: login
          required: true
          description: Users login
          style: simple
          schema:
            type: string
            example: juraj@nsoric.com

      responses:
        "200":
          description: User was successfully logged
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginUser"
        "400":
          description: Invalid request message parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse"   
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/PrivilegiesError"

    put:
      tags:
        - Auth
      summary: Update user detail
      description: "Update user datails. All item s in data structure 'user' is optional. If is not provided, there wil be no change with this field."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUser"
      parameters:
        - in: path
          name: login
          required: true
          description: User ID
          style: simple
          schema:
            type: number
            example: 1
      responses:
        "200":
          description: User was successfully changed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse"
        "404":
          description: API can’t map the client’s URI, that means user does not exist 
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse"
        "400":
          description: Incomplete source information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/PrivilegiesError"

    delete:
      tags:
        - Auth
      summary: Delete user
      description: "Delete user.With deleting user, the userRoels is also deleted"
      parameters:
        - in: path
          name: login
          required: true
          description: User login
          style: simple
          schema:
            type: string
            maxLength: 32
            example: juraj
      responses:
        "200":
          description: User was successfully deleted. In rensponse is AppUser structure - user to be deleted in DATA API
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppUser"
        "404":
          description: User with specific id wasn't find
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/PrivilegiesError"

  "/auth/company/":
    post:
      tags:
        - Auth
      summary: Store new company detail
      description: Store new company detail in Login database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginCompany"
      responses:
        "201":
          description: Company was successfully saved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse"
        "400":
          description: Incomplete source information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/PrivilegiesError"

    get:
      tags:
        - Auth
      summary: Get list of all companies.
      description: "Get list of all companies is allowed only for admin"
      responses:
        "200":
          description: API return list of all companies
          content:
            application/json:
              schema:
                type: array
                maxItems: 100
                items:
                  $ref: "#/components/schemas/LoginCompany"
        "400":
          description: Incomplete source information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/PrivilegiesError"

  "/auth/company/{id}":
    get:
      tags:
        - Auth
      summary: Get company detail
      description: "Return company details based on ID"
      parameters:
        - in: path
          name: id
          required: true
          description: Company ID
          style: simple
          schema:
            type: number
            example: 10
      responses:
        "200":
          description: API return company detail information 
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginCompany"
        "400":
          description: Incomplete source information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/PrivilegiesError"

    put:
      tags:
        - Auth
      summary: Edit company detail
      description: "Edit company details. Parts, whitch will be not included, will be not modified."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginCompany"
      parameters:
        - in: path
          name: id
          required: true
          description: Company ID
          style: simple
          schema:
            type: number
            example: 1
      responses:
        "200":
          description: Comapny was successfully changed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse"
        "404":
          description: Non-exist company
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse"
        "400":
          description: Incomplete source information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/PrivilegiesError"

  "/auth/user/company/":
    post:
      tags:
        - Auth
      summary: Add user to company
      description: "Add existing user to existing company and define user rights"
      requestBody:
        description: Body of POST method with id properties
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id_user:
                  type: number
                  example: 1
                id_company:
                  type: number
                  example: 10
      responses:
        "201":
          description: User was successfully added to company
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse"
        "400":
          description: Incomplete source information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/PrivilegiesError"

    delete:
      tags:
        - Auth
      summary: Remove user from company
      description: "Remove existing user from existing company"
      parameters:
        - in: header
          name: id_user
          required: true
          description: ID of existing user
          style: simple
          schema:
            type: number
            example: 1
        - in: header
          name: id_company
          required: true
          description: ID of existing company
          style: simple
          schema:
            type: number
            example: 10
      responses:
        "200":
          description: User was successfully removed from company
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse"
        "400":
          description: Incomplete source information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/PrivilegiesError"

    get:
      tags:
        - Auth
      summary: Get list of users related to company
      description: "Remove existing user from existing company"
      parameters:
        - in: header
          name: id_company
          required: true
          description: ID of existing company
          style: simple
          schema:
            type: number
            example: 10
      responses:
        "200":
          description: User was successfully removed from company
          content:
            application/json:
              schema:
                type: array
                maxItems: 500
                items:
                  $ref: "#/components/schemas/LoginUser"
        "400":
          description: Incomplete source information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/PrivilegiesError"

  "/auth/company/application/{id}":
    get:
      tags:
        - Auth
      summary: Get list of company applications
      description: "Allowed only for system admin"
      parameters:
        - in: path
          name: id
          required: true
          description: ID of existing company
          style: simple
          schema:
            type: number
            example: 10
      responses:
        "200":
          description: Return list of company related applications
          content:
            application/json:
              schema:
                type: array
                maxItems: 100
                items:
                  $ref: "#/components/schemas/LoginApplication"
        "400":
          description: Incomplete source information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/PrivilegiesError"

  "/auth/company/application/":
    post:
      tags:
        - Auth
      summary: Assign application to company
      description: "Assign existing application to exiting company"
      requestBody:
        description: JSON object with id_user and id_company
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id_company:
                  type: number
                  example: 10
                id_application:
                  type: number
                  example: 15
      responses:
        "201":
          description: Application succefully assign to company
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse"
        "400":
          description: Incomplete source information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/PrivilegiesError"

    delete:
      tags:
        - Auth
      summary: Remove application from company
      description: "Remove existing application from exiting company"
      parameters:
        - in: header
          name: id_company
          required: true
          description: ID of existing company
          style: simple
          schema:
            type: number
            example: 10
        - in: header
          name: id_application
          required: true
          description: ID of existing application
          style: simple
          schema:
            type: number
            example: 15
      responses:
        "200":
          description: Application succefully removed from company
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse"
        "400":
          description: Incomplete source information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/PrivilegiesError"

  "/auth/application/{id}":
    get:
      tags:
        - Auth
      summary: Get application detail
      description: "Return application details. Only for system admin."
      parameters:
        - in: path
          name: id
          required: true
          description: ID of application
          schema:
            type: integer
            example: 10
      responses:
        "200":
          description: Application detail information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginApplication"
        "400":
          description: Incomplete source information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/PrivilegiesError"

    put:
      tags:
        - Auth
      summary: Edit application detail
      description: "Edit  application details. Only for system admin."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginApplication"
      parameters:
        - in: path
          name: id
          required: true
          description: application ID
          schema:
            type: integer
            example: 10
      responses:
        "200":
          description: Application changed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse"
                
        "400":
          description: Incomplete source information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/PrivilegiesError"
        "404":
          description: Non-exist application
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse"
    delete:
      tags:
        - Auth
      summary: Delete application detail
      description: "Delete application details. Only for system admin."
      parameters:
        - in: path
          name: id
          required: true
          description: application ID
          style: simple
          schema:
            type: integer
            example: 10
      responses:
        "200":
          description: Application deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse"
        "400":
          description: Incomplete source information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/PrivilegiesError"

  "/auth/application/":
    post:
      tags:
        - Auth
      summary: Save new application detail
      description: "Return application details. Only for system admin."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginApplication"
      responses:
        "201":
          description: Application inserted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse"
        "400":
          description: Incomplete source information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/PrivilegiesError"



servers:
  - url: "http://login.nsoric.com/nsoric/"


components:
  responses:
    PrivilegiesError:
      description: User does not have the necessary permissions for the resource

    UnauthorizedError:
      description: User tried to operate on a protected resource without providing the proper authorization
      headers:
        X-API-key:
          description: API key
          schema:
            maxLength: 128
            type: string

  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    ApiKeyAuth:      
      type: apiKey
      in: header       
      name: X-API-KEY 
    BearerAuth:
      description: JWT token
      type: http
      scheme: bearer
      bearerFormat: JWT
    
  schemas:
  
    LoginCompany:
      type: object
      properties:
        id:
          type: number
          description: ID of company
          example: 10
        name:
          type: string
          description: name of company
          example: "MTF"
        address:
          type: string
          description: address of company
          example: "Bottova 10"
        city:
          type: string
          description: city of company
          example: "Trnava"
        zipCode:
          type: number
          description: ZIP code of company
          example: 91724
        country:
          type: string
          description: country of company
          example: Slovakia
        email:
          type: string
          description: email of company
          example: juraj.dudak@stuba.sk
        phone:
          type: string
          description: phone of company
          example: 9012 548 951
        enabled:
          type: number
          description: information about enabled account
          example: 1
        jwtSecret1:
          type: string
          description: first part of JWT secret
          example: fasasvap24
        applications:
          description: list of existing applications for company
          maxItems: 16
          type: array
          items:
            $ref: "#/components/schemas/LoginApplication"
        userRights:
          $ref: "#/components/schemas/LoginUserCompany"

    LoginServer:
      type: object
      properties:
        id:
          type: number
          description: ID of port
          example: 8
        name:
          type: string
          description: server name (not address)
          example: saturn
        apiSchema:
          type: string
          description: "used schema for API: http, https"
          example: https
        apiPort:
          type: number
          description: TCP port to connect server
          example: 81
        endpoint:
          type: string
          description: endpoint of application API
          example: api2
        thisInstance:
          type: integer
          description: "flag, that tells which server is used in actual instance. Only one row can have value 1"
          example: 1

    LoginApplication:
      type: object
      properties:
        name:
          type: string
          description: human friendly name of measurement instance
          example: home measurement
        host:
          type: string
          description: "Host of application"
          example: dudak.nsoric.com
        schema:
          type: string
          description: "connection schema:http or https" 
          example: http
        enabled:
          type: integer
          description: "status of appication: 1 - OK, 0 - disabled"
          example: 1
        dbHost:
          type: string
          description: Name of host that serve configuration
          example: localhost
        dbUser:
          type: string
          description: Authorized user to access to configuration
          example: server_user
        dbPassword:
          type: string
          description: Database password for dbUser
          example: SECRET_DB_PASSWORD
        applicaton:
          type: string
          description: Database name to stare whole application (measurement system)
          example: mtf.nsoric.com
        jwtSecret2:
          type: string
          description: second part of JWT secret
          example: KJHGFFTYUJHBV
        server:
          $ref: "#/components/schemas/LoginServer"

    LoginUser:
      type: object
      properties:
        id:
          type: number
          description: ID of user
          example: 1
        login:
          type: string
          description: user login
          example: juraj.dudak
        password:
          type: string
          description: "HASH of user password. Use SHA2 algorithm"
          example: asfas54f5as4fasf4a6s54fa
        enabled:
          type: number
          description: enable/disable user (0/1)
          example: 1
        firstname:
          type: string
          description: user name
          example: Juraj
        surname:
          type: string
          description: user surname
          example: Ďuďák
        isAdmin:
          type: number
          description: User with root privilegies
          example: 1
        companies:
          type: array
          items:
            $ref: "#/components/schemas/LoginCompany"
            
    LoginUserCompany:
      type: object
      properties:
        id:
          type: number
          description: ID of record
          example: 1
        companyId:
          type: number
          description: ID of company
          example: 12
        userId:
          type: number
          description: ID of user
          example: 1
        position:
          type: string
          description: position in company
          example: CEO
          
    AppGroup:
      type: object
      properties:
        name:
          type: string
          example: mainteiner
        allowView:
          type: integer
          example: 1
        allowManage:
          type: integer
          example: 1
        allowAdministration:
          type: integer
          example: 0
     
    AppUser:
      type: object
      properties:
        id:
          type: number
          description: ID of user
          example: 1
        login:
          type: string
          description: user login
          example: juraj.dudak
        firstname:
          type: string
          description: user name
          example: Juraj
        surname:
          type: string
          description: user surname
          example: Ďuďák
        group:
          $ref: "#/components/schemas/AppGroup"
        areas: 
          type: array
          items:
            $ref: "#/components/schemas/AppArea"
            
    AppArea:
      type: object
      required:
       - name
      properties:
        id:
          type: integer
          format: uuid
          example: 5
        name:
          type: string
          example: "area 51"
        sectors:
          type: array
          items:
            $ref: "#/components/schemas/AppSector"
            
    AppSector:
      type: object
      required:
       - id
       - name
      properties:
        id:
          type: integer
          format: uuid
        name:
          type: string
          example: outddor sector
        sensors:
          type: array
          items:
            $ref: "#/components/schemas/AppSensor"
            
    AppSensor:
      type: object
      required:
        - uid
      properties:
        name:
          type: string
          example: vlhkomer
        uid:
          type: string
          example: 12adc021980cbfe9
        type_id:
          $ref: "#/components/schemas/AppType"
        level:
          type: number
        min_value:
          type: number
        max_value:
          type: number
    
    AppType:
      type: object
      required:
        - id
      properties:
        id:
          type: number
          format: uuid
          example: 13
        type1_id:
          $ref: "#/components/schemas/AppTypeGroup1"
        type2_id:
          $ref: "#/components/schemas/AppTypeGroup2"
        type3:
          type: number
          example: 2
        text:
          type: string
          example: text
        minimalValue:
          type: number
          example: -20
        maximalValue:
          type: number
          example: 80
          
    AppTypeGroup1:
      type: object
      required:
        - type1
        - text
        - unit
        - unitSI
      properties:
        type1:
          type: number
          format: uuid
          example: 11
        text:
          type: string
          example: text
        unit:
          type: string
          example: hmotnost
        unitSI:
          type: string
          example: kg

    AppTypeGroup2:
      type: object
      properties:
        type1:
          type: number
          format: uuid
          example: 12
        text:
          type: string
          example: text

    LoginUserObject:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/LoginUser"
        JWT:
          type: string
          description: JWT token
          example: JIOIJH.ADSPIDUSAP.SJDOASID

    StateResponse:
      type: object
      properties:
        status:
          type: boolean
          description: fail/succes of the operation
          example: true
        message:
          type: string
          description: human readable message
          example: The reason for this response
security:
  - BasicAuth: []
  - ApiKeyAuth: []
  - BearerAuth: []
